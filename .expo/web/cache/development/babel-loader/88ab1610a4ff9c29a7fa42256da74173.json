{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, REGISTRATION_FAIL, REGISTRATION_SUCCESS, GET_ERRORS, LOGOUT_USER, CLEAR_DATA, CLEAR_V_DATA, CLEAR_ALL_DATA, SET_LOADER } from \"./types\";\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: USER_LOADING\n    });\n    var token = getState().auth.token;\n    var config = {\n      header: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (token) {\n      config.header['Authorization'] = \"Token \" + token;\n    }\n\n    dispatch({\n      type: SET_LOADER\n    });\n    axios.get('/auth/user/', tokenConfig(getState)).then(function (res) {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    });\n  };\n};\nexport var login = function login(email, password) {\n  return function (dispatch) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    var body = JSON.stringify({\n      email: email,\n      password: password\n    });\n    dispatch({\n      type: SET_LOADER\n    });\n    axios.post('/auth/login/', body, config).then(function (res) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      console.log(err);\n      dispatch({\n        type: SET_LOADER\n      });\n    });\n  };\n};\nexport var register = function register(name, email, password, phone, dob) {\n  return function (dispatch) {\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    dispatch({\n      type: SET_LOADER\n    });\n    var body = JSON.stringify({\n      name: name,\n      email: email,\n      password: password,\n      phone: phone,\n      dob: dob\n    });\n    axios.post('/auth/register/', body, config).then(function (res) {\n      dispatch({\n        type: REGISTRATION_SUCCESS,\n        payload: res.data\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: REGISTRATION_FAIL\n      });\n      var error = {\n        msg: err.response.data,\n        status: err.response.status\n      };\n      dispatch({\n        type: GET_ERRORS,\n        payload: error\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: SET_LOADER\n    });\n    axios.post('/auth/logout/', null, tokenConfig(getState)).then(function (res) {\n      dispatch({\n        type: LOGOUT_USER\n      });\n      dispatch({\n        type: SET_LOADER\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n};\nexport var tokenConfig = function tokenConfig(getState) {\n  var token = getState().auth.token;\n  var config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['Authorization'] = \"Token \" + token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/anthi/Documents/conmeter/conmeter/redux/actions/auth.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","REGISTRATION_FAIL","REGISTRATION_SUCCESS","GET_ERRORS","LOGOUT_USER","CLEAR_DATA","CLEAR_V_DATA","CLEAR_ALL_DATA","SET_LOADER","loadUser","dispatch","getState","type","token","auth","config","header","get","tokenConfig","then","res","payload","data","catch","error","login","email","password","headers","body","JSON","stringify","post","err","console","log","register","name","phone","dob","msg","response","status","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, REGISTRATION_FAIL, REGISTRATION_SUCCESS, GET_ERRORS, LOGOUT_USER, CLEAR_DATA, CLEAR_V_DATA, CLEAR_ALL_DATA, SET_LOADER } from './types';\r\n\r\n\r\nexport const loadUser = () => (dispatch, getState) =>{\r\n    dispatch({type: USER_LOADING});\r\n\r\n    const token = getState().auth.token;\r\n\r\n    const config = {\r\n        header:{\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    if(token){\r\n        config.header['Authorization'] = `Token ${token}`;\r\n    }\r\n    dispatch({\r\n      type: SET_LOADER\r\n    });\r\n    axios.get('/auth/user/', tokenConfig(getState))\r\n        .then(res => {\r\n            dispatch({\r\n                type: USER_LOADED,\r\n                payload: res.data\r\n            });\r\n            dispatch({\r\n              type: SET_LOADER\r\n            });\r\n        })\r\n        .catch(error => {\r\n            dispatch({\r\n                type: AUTH_ERROR\r\n            });\r\n            dispatch({\r\n              type: SET_LOADER\r\n            });\r\n        })\r\n} \r\n\r\n\r\nexport const login = (email, password) => (dispatch) =>{\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      };\r\n    \r\n      // Request Body\r\n      const body = JSON.stringify({ email, password });\r\n\r\n      dispatch({\r\n        type: SET_LOADER\r\n      });\r\n    \r\n      axios\r\n        .post('/auth/login/', body, config)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: LOGIN_SUCCESS,\r\n            payload: res.data,\r\n          });\r\n          dispatch({\r\n            type: SET_LOADER\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          dispatch({\r\n            type: LOGIN_FAIL,\r\n          });\r\n          console.log(err)\r\n          dispatch({\r\n            type: SET_LOADER\r\n          });\r\n        })\r\n    \r\n} \r\n\r\nexport const register = (name, email, password, phone, dob) => (dispatch) =>{\r\n  \r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  dispatch({\r\n    type: SET_LOADER\r\n  });\r\n\r\n  const body = JSON.stringify({ name, email, password, phone, dob });\r\n\r\n  axios\r\n  .post('/auth/register/', body, config)\r\n  .then((res) => {\r\n    dispatch({\r\n      type: REGISTRATION_SUCCESS,\r\n      payload: res.data,\r\n    });\r\n    dispatch({\r\n      type: SET_LOADER\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    dispatch({\r\n      type: REGISTRATION_FAIL,\r\n    });\r\n    const error ={\r\n      msg: err.response.data,\r\n      status: err.response.status\r\n    };\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error\r\n    });\r\n    dispatch({\r\n      type: SET_LOADER\r\n    });\r\n  })\r\n\r\n}\r\n\r\nexport const logout = () => (dispatch, getState) =>{\r\n\r\n  dispatch({\r\n    type: SET_LOADER\r\n  });\r\n  axios.post('/auth/logout/', null, tokenConfig(getState))\r\n    .then(\r\n      res =>{\r\n      dispatch({\r\n        type: LOGOUT_USER\r\n      });\r\n      dispatch({\r\n        type: SET_LOADER\r\n      });\r\n    }\r\n    )\r\n    .catch(err=>{console.log(err)})\r\n}\r\n\r\nexport const tokenConfig = (getState) => {\r\n  // Get token from state\r\n  const token = getState().auth.token;\r\n\r\n  // Headers\r\n  const config = {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  };\r\n\r\n  // If token, add to headers config\r\n  if (token) {\r\n    config.headers['Authorization'] = `Token ${token}`;\r\n  }\r\n\r\n  return config;\r\n};"]},"metadata":{},"sourceType":"module"}