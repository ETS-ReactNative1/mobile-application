{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\anthi\\\\Documents\\\\GitHub\\\\cap\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Login from \"./screens/auth/Login\";\nimport Register from \"./screens/auth/Register\";\nimport ForgotPassword from \"./screens/auth/ForgotPassword\";\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport Nav from \"./navigation/Nav\";\nimport useLinking from \"./navigation/useLinking\";\nimport store from \"./redux/store\";\nimport { loadUser } from \"./redux/actions/auth\";\nimport { Provider, useSelector } from 'react-redux';\nimport axios from 'axios';\naxios.defaults.baseURL = 'http://192.168.43.152:8000/';\naxios.defaults.timeout = 6000;\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\"),\n                'disolve': require(\"./assets/fonts/Disolve_regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  React.useEffect(function () {\n    store.dispatch(loadUser());\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }))));\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000'\n  }\n});","map":{"version":3,"sources":["C:/Users/anthi/Documents/GitHub/cap/App.js"],"names":["React","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","Login","Register","ForgotPassword","BottomTabNavigator","Nav","useLinking","store","loadUser","Provider","useSelector","axios","defaults","baseURL","timeout","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","dispatch","skipLoadingScreen","styles","container","Platform","OS","StyleSheet","create","flex","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Login from './screens/auth/Login'\nimport Register from './screens/auth/Register'\nimport ForgotPassword from './screens/auth/ForgotPassword'\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport Nav from './navigation/Nav'\nimport useLinking from './navigation/useLinking';\nimport store from './redux/store';\nimport { loadUser } from './redux/actions/auth';\nimport { Provider, useSelector } from 'react-redux';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'http://192.168.43.152:8000/';\naxios.defaults.timeout = 6000;\n\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n        \n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n        \n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n          'disolve': require('./assets/fonts/Disolve_regular.ttf')\n        });\n\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  React.useEffect(()=>{\n    store.dispatch(loadUser());\n  },[])\n\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Nav/>\n        </NavigationContainer>\n      </View>\n      </Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}